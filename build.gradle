plugins {
    id 'groovy'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.5"
    id 'idea'
}

group 'net.bdavies'

ext {
    //Project Contants
    project_name = "BabbleBot-Server"
    artifact_group = 'net.bdavies'
    project_version = "$version".toString()
    project_description = "A fully modular bot for Discord using Discord4j as the back-end"
    project_url = 'https://babblebot.bdavies.net'
    project_jdk = JavaVersion.VERSION_11
    jdk = JavaVersion.current().majorVersion
    jdk_javadoc = "https://docs.oracle.com/javase/$jdk/docs/api/".toString()
    if (JavaVersion.current().isJava11Compatible()) {
        jdk_javadoc = "https://docs.oracle.com/en/java/javase/$jdk/docs/api/".toString()
    }

    isRelease = !version.toString().endsWith("-SNAPSHOT")
    isJitpack = "true" == System.getenv("JITPACK")
}

if (!isRelease || isJitpack) {
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: "com.jfrog.bintray"

    if (!isJitpack && isRelease) apply plugin: 'signing'

    group = artifact_group
    version = project_version
    description = project_description

    sourceCompatibility = project_jdk
    targetCompatibility = project_jdk

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
        jcenter()
    }

    tasks.withType(Javadoc) {
        options {
            encoding = 'UTF-8'
            links = [
                    jdk_javadoc,
                    "https://fasterxml.github.io/jackson-databind/javadoc/2.10/",
                    "http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/",
                    "https://projectreactor.io/docs/core/release/api/",
                    "https://projectreactor.io/docs/netty/release/api/",
                    "https://projectreactor.io/docs/extra/release/api/",
                    "https://netty.io/4.1/api/"
            ]
        }
        if (JavaVersion.current().isJava9Compatible()) {
            //options.addBooleanOption('html5', true)
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.incremental = true

    }

    task downloadDependencies() {
        description 'Download all dependencies to the Gradle cache'
        doLast {
            configurations.findAll { it.canBeResolved }.files
        }
    }
}

subprojects {
    archivesBaseName = "babblebot-server-$project.name"
    apply plugin: 'maven-publish'

    if (!isJitpack && isRelease) apply plugin: 'signing'

    project.afterEvaluate {
        if (project.name != "server" && project.name != "app" && project.name != "web-client") {
            task javadocJar(type: Jar) {
                dependsOn project.tasks.javadoc
                from project.tasks.javadoc.destinationDir
                archiveClassifier = 'javadoc'
                group 'build'
            }

            task sourceJar(type: Jar) {
                dependsOn project.tasks.classes
                from sourceSets.main.allSource
                archiveClassifier = 'sources'
                group 'build'
            }
            publishing {
                repositories {
                    maven {
                        name = "GitHubPackages"
                        url = uri("https://maven.pkg.github.com/bendavies99/Babblebot-Server")
                        credentials {
                            username = "bendavies99"
                            password = System.getenv("GH_TOKEN")
                        }
                    }
                }
                publications {
                    maven(MavenPublication) {
                        from components.java
                        artifact sourceJar
                        artifact javadocJar
                        artifactId archivesBaseName
                        versionMapping {
                            usage('java-api') {
                                fromResolutionOf('runtimeClasspath')
                            }
                            usage('java-runtime') {
                                fromResolutionResult()
                            }
                        }

                        pom {
                            name = "babblebot-server-$project.name"
                            description = 'A fully modular bot for Discord using Discord4j as the back-end'
                            url = 'https://github.com/bendavies99/BabbleBot-Server'
                            issueManagement {
                                system = 'GitHub'
                                url = 'https://github.com/bendavies99/BabbleBot-Server/issues'
                            }
                            licenses {
                                license {
                                    name = 'MIT'
                                    url = 'https://github.com/bendavies99/BabbleBot-Server/LICENSE.md'
                                    distribution = 'repo'
                                }
                            }
                            scm {
                                url = 'https://github.com/bendavies99/BabbleBot-Server'
                                connection = 'scm:git:git://github.com/bendavies99/BabbleBot-Server.git'
                                developerConnection = 'scm:git:ssh://git@github.com:bendavies99/BabbleBot-Server.git'
                            }
                            developers {
                                developer {
                                    name = 'Ben Davies <me@bdavies.net>'
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    tasks.withType(Javadoc) {
        title = "$archivesBaseName ${version} API"
        options.windowTitle = "$archivesBaseName ($version)"
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
        failOnError false
    }

    task createProperties {
        doLast {
            def version = project.version.toString()
            def file = new File("$project.buildDir/resources/main/version.txt")
            if (!file.exists()) {
                println("Ran Create Properties")
                new File("$project.buildDir/resources/main/").mkdirs()
                file.createNewFile()
            }
            file.write(version)
        }
    }

    jar { dependsOn createProperties }
    compileJava { dependsOn createProperties }
}


